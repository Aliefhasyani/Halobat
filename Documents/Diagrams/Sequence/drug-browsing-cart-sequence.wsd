@startuml drug-browsing-cart-sequence
title Drug Browsing and Cart Management Sequence Diagram

actor User
participant "Drug\nCatalog" as Catalog
participant "Drug\nController" as DrugController
participant "Cart\nController" as CartController
participant "Drug\nModel" as DrugModel
participant "Cart\nModel" as CartModel
participant "Database" as DB

User -> Catalog: Browse drug catalog
Catalog -> DrugController: getDrugs(filters, pagination)
DrugController -> DrugModel: getAllDrugs(filters, limit, offset)
DrugModel -> DB: SELECT * FROM drugs WHERE conditions ORDER BY name LIMIT ? OFFSET ?
DB --> DrugModel: Drugs list
DrugModel --> DrugController: Drugs data
DrugController --> Catalog: Drugs information
Catalog --> User: Display drug catalog

User -> Catalog: View drug details
Catalog -> DrugController: getDrugDetails(drugId)
DrugController -> DrugModel: findById(drugId)
DrugModel -> DB: SELECT * FROM drugs WHERE id=?
DB --> DrugModel: Drug details
DrugModel --> DrugController: Drug information
DrugController --> Catalog: Drug details
Catalog --> User: Display drug details

User -> Catalog: Add drug to cart (drugId, quantity)
Catalog -> CartController: addToCart(userId, drugId, quantity)

CartController -> DrugModel: checkStock(drugId, quantity)
DrugModel -> DB: SELECT stock FROM drugs WHERE id=?
DB --> DrugModel: Current stock
DrugModel --> CartController: Stock availability

alt Insufficient stock
    CartController --> Catalog: Stock error message
    Catalog --> User: Show stock limitation
else Sufficient stock
    CartController -> CartModel: findCartItem(userId, drugId)
    CartModel -> DB: SELECT * FROM carts WHERE user_id=? AND drug_id=?
    DB --> CartModel: Existing cart item
    CartModel --> CartController: Cart item data
    
    alt Item already in cart
        CartController -> CartModel: updateQuantity(cartItemId, newQuantity)
        CartModel -> DB: UPDATE carts SET quantity=? WHERE id=?
        DB --> CartModel: Update successful
        CartModel --> CartController: Item updated
    else New item
        CartController -> CartModel: createCartItem(userId, drugId, quantity)
        CartModel -> DB: INSERT INTO carts (user_id, drug_id, quantity)
        DB --> CartModel: Item added
        CartModel --> CartController: Item created
    end
    
    CartController --> Catalog: Item added successfully
    Catalog --> User: Show success message
end

User -> Catalog: View cart
Catalog -> CartController: getCart(userId)
CartController -> CartModel: getCartWithDrugs(userId)
CartModel -> DB: SELECT c.*, d.* FROM carts c JOIN drugs d ON c.drug_id = d.id WHERE c.user_id=?
DB --> CartModel: Cart items with drug details
CartModel --> CartController: Cart data
CartController --> Catalog: Cart information
Catalog --> User: Display cart contents

alt User modifies cart
    User -> Catalog: Update item quantity
    Catalog -> CartController: updateCartItem(cartItemId, newQuantity)
    
    alt Quantity is 0
        CartController -> CartModel: removeCartItem(cartItemId)
        CartModel -> DB: DELETE FROM carts WHERE id=?
        DB --> CartModel: Item removed
        CartModel --> CartController: Removal successful
    else Quantity > 0
        CartController -> DrugModel: checkStock(drugId, newQuantity)
        DrugModel -> DB: SELECT stock FROM drugs WHERE id=?
        DB --> DrugModel: Stock status
        DrugModel --> CartController: Stock availability
        
        alt Sufficient stock
            CartController -> CartModel: updateQuantity(cartItemId, newQuantity)
            CartModel -> DB: UPDATE carts SET quantity=? WHERE id=?
            DB --> CartModel: Update successful
            CartModel --> CartController: Item updated
        else Insufficient stock
            CartController --> Catalog: Stock limitation error
            Catalog --> User: Show maximum available quantity
        end
    end
    
    CartController --> Catalog: Cart updated
    Catalog --> User: Show updated cart
end

@enduml
