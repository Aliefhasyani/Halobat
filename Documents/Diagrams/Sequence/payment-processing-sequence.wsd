@startuml payment-processing-sequence
title Payment Processing Sequence Diagram

actor User
participant "Checkout\nPage" as CheckoutUI
participant "Payment\nController" as PaymentController
participant "Payment\nModel" as PaymentModel
participant "Order\nModel" as OrderModel
participant "Cart\nModel" as CartModel
participant "Drug\nModel" as DrugModel
participant "Payment\nGateway" as PaymentGateway
participant "Database" as DB

note left: Continues from order-creation-sequence

User -> CheckoutUI: Select payment method and enter details
CheckoutUI -> PaymentController: processPayment(orderId, paymentData)

PaymentController -> PaymentModel: createPayment(orderId, amount, method)
PaymentModel -> DB: INSERT INTO payments (order_id, amount, method, status)
DB --> PaymentModel: Payment record created
PaymentModel --> PaymentController: Payment ID

PaymentController -> PaymentGateway: processPayment(paymentDetails)
PaymentGateway -> PaymentGateway: Validate payment information
PaymentGateway -> PaymentGateway: Process transaction

alt Payment successful
    PaymentGateway --> PaymentController: Payment success with transaction ID
    
    PaymentController -> PaymentModel: updatePaymentStatus(paymentId, 'completed', transactionId)
    PaymentModel -> DB: UPDATE payments SET status='completed', transaction_id=? WHERE id=?
    DB --> PaymentModel: Payment updated
    PaymentModel --> PaymentController: Update successful
    
    PaymentController -> OrderModel: updateOrderStatus(orderId, 'confirmed')
    OrderModel -> DB: UPDATE orders SET status='confirmed' WHERE id=?
    DB --> OrderModel: Order confirmed
    OrderModel --> PaymentController: Order updated
    
    PaymentController -> CartModel: clearCart(userId)
    CartModel -> DB: DELETE FROM carts WHERE user_id=?
    DB --> CartModel: Cart cleared
    CartModel --> PaymentController: Cart emptied
    
    PaymentController --> CheckoutUI: Payment successful
    CheckoutUI --> User: Show order confirmation
    
else Payment failed
    PaymentGateway --> PaymentController: Payment failed with error
    
    PaymentController -> PaymentModel: updatePaymentStatus(paymentId, 'failed')
    PaymentModel -> DB: UPDATE payments SET status='failed' WHERE id=?
    DB --> PaymentModel: Payment updated
    PaymentModel --> PaymentController: Status updated
    
    PaymentController -> OrderModel: updateOrderStatus(orderId, 'cancelled')
    OrderModel -> DB: UPDATE orders SET status='cancelled' WHERE id=?
    DB --> OrderModel: Order cancelled
    OrderModel --> PaymentController: Order updated
    
    loop For each order item
        PaymentController -> DrugModel: restoreStock(drugId, quantity)
        DrugModel -> DB: UPDATE drugs SET stock = stock + ? WHERE id=?
        DB --> DrugModel: Stock restored
        DrugModel --> PaymentController: Stock returned
    end
    
    PaymentController --> CheckoutUI: Payment failed
    CheckoutUI --> User: Show payment error and retry options
end

@enduml
