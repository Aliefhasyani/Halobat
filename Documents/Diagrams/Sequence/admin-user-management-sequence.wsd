@startuml admin-user-management-sequence
title Admin User Management Sequence Diagram

actor Admin
participant "Admin\nPanel" as AdminUI
participant "User\nController" as UserController
participant "User\nModel" as UserModel
participant "Role\nModel" as RoleModel
participant "Order\nModel" as OrderModel
participant "Database" as DB

== View User Management ==
Admin -> AdminUI: Access user management
AdminUI -> UserController: getUsers(filters, pagination)
UserController -> UserModel: getAllUsersWithRoles(filters, limit, offset)
UserModel -> DB: SELECT u.*, r.name as role_name FROM users u JOIN roles r ON u.role_id = r.id WHERE conditions LIMIT ? OFFSET ?
DB --> UserModel: Users list with roles
UserModel --> UserController: Users data
UserController --> AdminUI: Users information
AdminUI --> Admin: Display user list

== View User Details ==
Admin -> AdminUI: Select user to view
AdminUI -> UserController: getUserDetails(userId)

UserController -> UserModel: findUserWithRole(userId)
UserModel -> DB: SELECT u.*, r.name as role_name FROM users u JOIN roles r ON u.role_id = r.id WHERE u.id=?
DB --> UserModel: User details with role
UserModel --> UserController: User data

UserController -> OrderModel: getUserOrders(userId)
OrderModel -> DB: SELECT * FROM orders WHERE user_id=? ORDER BY created_at DESC
DB --> OrderModel: User orders
OrderModel --> UserController: Orders data

UserController --> AdminUI: Complete user information
AdminUI --> Admin: Display user profile and order history

== Add New User ==
Admin -> AdminUI: Click "Add New User"
AdminUI -> RoleModel: getAllRoles()
RoleModel -> DB: SELECT * FROM roles ORDER BY name
DB --> RoleModel: Available roles
RoleModel --> AdminUI: Roles list
AdminUI --> Admin: Show user creation form with role options

Admin -> AdminUI: Fill user details (username, email, password, full_name, role)
AdminUI -> UserController: createUser(userData)

UserController -> UserController: validateUserData(userData)
UserController -> UserModel: checkUserExists(email, username)
UserModel -> DB: SELECT * FROM users WHERE email=? OR username=?
DB --> UserModel: User existence check
UserModel --> UserController: User existence status

alt User already exists
    UserController --> AdminUI: User conflict error
    AdminUI --> Admin: Show error message
else User available
    UserController -> UserModel: createUser(userData)
    UserModel -> DB: INSERT INTO users (username, email, password, role_id, full_name)
    DB --> UserModel: User created
    UserModel --> UserController: New user data
    
    UserController --> AdminUI: User created successfully
    AdminUI --> Admin: Show success message and refresh list
end

== Edit User ==
Admin -> AdminUI: Select user to edit
AdminUI -> UserController: getUserForEdit(userId)
UserController -> UserModel: findById(userId)
UserModel -> DB: SELECT * FROM users WHERE id=?
DB --> UserModel: User details
UserModel --> UserController: User data

UserController -> RoleModel: getAllRoles()
RoleModel -> DB: SELECT * FROM roles ORDER BY name
DB --> RoleModel: Available roles
RoleModel --> UserController: Roles list

UserController --> AdminUI: User data and available roles
AdminUI --> Admin: Show edit form with current data

Admin -> AdminUI: Modify user details
AdminUI -> UserController: updateUser(userId, updatedData)

UserController -> UserController: validateUserData(updatedData)
UserController -> UserModel: updateUser(userId, updatedData)
UserModel -> DB: UPDATE users SET username=?, email=?, role_id=?, full_name=? WHERE id=?
DB --> UserModel: Update successful
UserModel --> UserController: Updated user data

UserController --> AdminUI: User updated successfully
AdminUI --> Admin: Show success message and refresh list

== Delete User ==
Admin -> AdminUI: Select user to delete
AdminUI -> UserController: checkUserDeletion(userId)

UserController -> OrderModel: checkUserOrders(userId)
OrderModel -> DB: SELECT COUNT(*) FROM orders WHERE user_id=? AND status IN ('pending', 'confirmed', 'shipped')
DB --> OrderModel: Active order count
OrderModel --> UserController: Active orders status

alt User has active orders
    UserController --> AdminUI: Cannot delete - active orders exist
    AdminUI --> Admin: Show warning message
    
    Admin -> AdminUI: Choose to deactivate instead
    AdminUI -> UserController: deactivateUser(userId)
    UserController -> UserModel: deactivateUser(userId)
    UserModel -> DB: UPDATE users SET status='inactive' WHERE id=?
    DB --> UserModel: User deactivated
    UserModel --> UserController: Status updated
    UserController --> AdminUI: User deactivated
    AdminUI --> Admin: Show deactivation confirmation
    
else No active orders
    AdminUI --> Admin: Show delete confirmation dialog
    Admin -> AdminUI: Confirm deletion
    AdminUI -> UserController: deleteUser(userId)
    
    UserController -> UserModel: deleteUser(userId)
    UserModel -> DB: DELETE FROM users WHERE id=?
    DB --> UserModel: User deleted
    UserModel --> UserController: Deletion successful
    
    UserController --> AdminUI: User deleted successfully
    AdminUI --> Admin: Show success message and refresh list
end

== Change User Role ==
Admin -> AdminUI: Select user to change role
AdminUI -> UserController: getUserCurrentRole(userId)
UserController -> UserModel: findUserWithRole(userId)
UserModel -> DB: SELECT u.*, r.name as role_name FROM users u JOIN roles r ON u.role_id = r.id WHERE u.id=?
DB --> UserModel: User with current role
UserModel --> UserController: Current role data

UserController -> RoleModel: getAllRoles()
RoleModel -> DB: SELECT * FROM roles ORDER BY name
DB --> RoleModel: Available roles
RoleModel --> UserController: Roles list

UserController --> AdminUI: Current role and available roles
AdminUI --> Admin: Show role change dialog

Admin -> AdminUI: Select new role
AdminUI -> UserController: changeUserRole(userId, newRoleId)

UserController -> UserModel: updateUserRole(userId, newRoleId)
UserModel -> DB: UPDATE users SET role_id=? WHERE id=?
DB --> UserModel: Role updated
UserModel --> UserController: Update successful

UserController --> AdminUI: Role changed successfully
AdminUI --> Admin: Show success message and refresh user details

@enduml
